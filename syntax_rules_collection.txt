(1)
# E::= T E`
# E`::= '+' T E` | \L
# T::= F T`
# T`::= '*' F T` | \L
# F::= '(' E ')' | 'id'

(2)
# S::= R T
# R::= 's' U R 'b' | \L
# U::= 'u' U | \L
# V::= 'v' V | \L
# T::= V 't' T | \L

(3)
# bexpr::= bterm bexpr`
# bexpr`::= 'or' bterm bexpr` | \L
# bterm::= bfactor bterm`
# bterm`::= 'and' bfactor bterm` | \L
# bfactor::= 'not' bfactor | '(' bexpr ')' | 'true' | 'false'

(4)
# E::= T E`
# E`::= '+' E | \L
# T::= F T`
# T`::= T | \L
# F::= P F`
# F`::= '*' F | \L
# P ::= '(' E ')' | 'a' | 'b' | 'em'

(5)
# CLASS_DECL ::= MODIFIER 'class' 'id' '{' CLASS_BODY '}'
# CLASS_BODY ::= DECLARATION | ASSIGNMENT | METHOD_LIST | \L
# METHOD_LIST ::= METHOD_DECL | METHOD_LIST METHOD_DECL
# METHOD_DECL ::= MODIFIER PRIMITIVE_TYPE 'id' '(' ')' '{' METHOD_BODY '}'
# METHOD_BODY ::= STATEMENT_LIST
# STATEMENT_LIST ::= STATEMENT | STATEMENT_LIST STATEMENT
# STATEMENT ::= DECLARATION | IF | WHILE | ASSIGNMENT
# DECLARATION ::= PRIMITIVE_TYPE IDENTIFIER;
# PRIMITIVE_TYPE ::= 'int' | 'float'
# MODIFIER ::= 'public' | 'private' | 'protected'
# IF ::= 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}'
# WHILE ::= 'while' '(' EXPRESSION ')' '{' STATEMENT '}'
# ASSIGNMENT ::= IDENTIFIER '=' EXPRESSION ';'
# EXPRESSION ::= NUMBER | EXPRESSION INFIX_OPERATOR EXPRESSION | IDENTIFIER | '(' EXPRESSION ')'
# INFIX_OPERATOR ::= '+' | '-' | '*' | '/' | '%' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '|' | '&&'
