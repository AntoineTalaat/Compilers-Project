(1)
# E::= T E`
# E`::= '+' T E` | \L
# T::= F T`
# T`::= '*' F T` | \L
# F::= '(' E ')' | 'id'

(2)
# S::= R T
# R::= 's' U R 'b' | \L
# U::= 'u' U | \L
# V::= 'v' V | \L
# T::= V 't' T | \L

(3)
# bexpr::= bterm bexpr`
# bexpr`::= 'or' bterm bexpr` | \L
# bterm::= bfactor bterm`
# bterm`::= 'and' bfactor bterm` | \L
# bfactor::= 'not' bfactor | '(' bexpr ')' | 'true' | 'false'

(4)
# E::= T E`
# E`::= '+' E | \L
# T::= F T`
# T`::= T | \L
# F::= P F`
# F`::= '*' F | \L
# P ::= '(' E ')' | 'a' | 'b' | 'em'

(5)
# METHOD_BODY ::= STATEMENT_LIST
# STATEMENT_LIST ::= STATEMENT | STATEMENT_LIST STATEMENT
# STATEMENT ::= DECLARATION | IF | WHILE | ASSIGNMENT
# DECLARATION ::= PRIMITIVE_TYPE 'id' ';'
# PRIMITIVE_TYPE ::= 'int' | 'float'
# IF ::= 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}'
# WHILE ::= 'while' '(' EXPRESSION ')' '{' STATEMENT '}'
# ASSIGNMENT ::= 'id' 'assign' EXPRESSION ';'
# EXPRESSION ::= SIMPLE_EXPRESSION | SIMPLE_EXPRESSION 'relop' SIMPLE_EXPRESSION
# SIMPLE_EXPRESSION ::= TERM | SIGN TERM | SIMPLE_EXPRESSION 'addop' TERM
# TERM ::= FACTOR | TERM 'mulop' FACTOR
# FACTOR ::= 'id' | 'num' | '(' EXPRESSION ')'
# SIGN ::= 'relop'



A -> B C D 
B -> b 
C -> c | eps 
D -> d | eps 


computeFollow(B)
Follow B contains Follow A




LEFT FACTORING:EXPRESSION
EXPRESSION -> [[SIMPLE_EXPRESSION],[SIMPLE_EXPRESSION,'relop',SIMPLE_EXPRESSION]]
AFTER LEFT FACTORING: EXPRESSION
EXPRESSION -> [[SIMPLE_EXPRESSION,EXPRESSION`]]
EXPRESSION` -> [[],['relop',SIMPLE_EXPRESSION]]

















computeFollow(B)
get first of C contains epsillon? yes > get first of D constains epsillon